#[allow(non_snake_case)]
pub mod Manifest {
    use std::{fs, io};

    use crate::utils::join_paths;
    use crate::utils::UrlMatcher;
    use crate::walker::WalkerContainer;
    use crate::CompileContext;

    /// Generate TS code for this node and children
    fn build_node(container: &WalkerContainer, tree_id: usize, is_root: bool) -> String {
        let tree = container.get_tree_locked(tree_id).unwrap();

        let matcher = UrlMatcher::new(tree.rel_path.clone());

        let mut out: String = "".into();
        if !is_root {
            out.push_str("if (");
            let start = matcher.start_inline("req");
            out.push_str(&start);
            out.push_str(") {");

            let update = matcher.update_decl("req");
            out.push_str(&update);
        }

        if let Some(leaf) = tree.leaf {
            out.push_str("if (");

            let exact = matcher.exact_inline("req", true);
            out.push_str(&exact);
            out.push_str(
                ") {
            return '",
            );

            let leaf = container.get_leaf_locked(leaf).unwrap();
            out.push_str(&leaf.file_path.display().to_string());
            out.push('\'');

            out.push('}');
        }

        let children: String = tree
            .children
            .iter()
            .map(|c| build_node(&container, *c, false))
            .collect();
        out.push_str(&children);

        out.push_str("return null;");
        if !is_root {
            out.push('}');
        }

        out
    }

    /// Generate a manifest file from a container.
    pub fn build(container: &WalkerContainer) -> String {
        let mut out: String = "
            // This file is generated by Densky-Framework
            // manifest.ts
            import * as $_Densky_Runtime_$ from \"densky/runtime.ts\";

            export default function resolve(req: $_Densky_Runtime_$.HTTPRequest): string | null {
            "
        .into();

        let root = build_node(container, container.get_root_id().unwrap(), true);
        out.push_str(&root);

        out.push('}');
        prettify_js::prettyprint(&out).0
    }

    /// Generate and write a manifest file from a container
    pub fn update(container: &WalkerContainer, context: &CompileContext) -> io::Result<()> {
        let manifest = build(container);

        fs::write(join_paths("manifest.ts", &context.output_dir), manifest)
    }
}
